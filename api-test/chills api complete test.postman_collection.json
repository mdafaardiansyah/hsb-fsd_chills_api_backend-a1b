{
	"info": {
		"_postman_id": "chills-api-complete-test",
		"name": "Chills API Complete Test",
		"description": "Complete API testing collection for Chills Movie API with Authentication, Movies, and Upload endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test('Response has success true', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"});",
									"pm.test('Response contains user data', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.user).to.have.property('email');",
									"    pm.expect(responseJson.data.user).to.have.property('username');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\",\n    \"full_name\": \"Test User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "register"]
						},
						"description": "Register a new user account"
					}
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Response has token', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.token).to.be.a('string');",
									"    pm.environment.set('authToken', responseJson.data.token);",
									"});",
									"pm.test('Response contains user data', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.user).to.have.property('email');",
									"    pm.expect(responseJson.data.user).to.have.property('username');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "login"]
						},
						"description": "Login with email and password to get JWT token"
					}
				},
				{
					"name": "Verify Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Email verified successfully', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"    pm.expect(responseJson.message).to.include('verified');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/verify-email?token={{verificationToken}}",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "verify-email"],
							"query": [
								{
									"key": "token",
									"value": "{{verificationToken}}"
								}
							]
						},
						"description": "Verify email address using verification token"
					}
				}
			]
		},
		{
			"name": "Movies",
			"item": [
				{
					"name": "Get All Movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Response has success true', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"});",
									"pm.test('Response has data array', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/movies",
							"host": ["{{baseUrl}}"],
							"path": ["movies"]
						},
						"description": "Get all movies (requires authentication)"
					}
				},
				{
					"name": "Get Movies with Filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Response has filters metadata', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('filters');",
									"    pm.expect(responseJson).to.have.property('sorting');",
									"    pm.expect(responseJson).to.have.property('pagination');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/movies?genre=Drama&director=Christopher Nolan&year=2008&search=Batman&sortBy=rating&sortOrder=desc&limit=10&page=1",
							"host": ["{{baseUrl}}"],
							"path": ["movies"],
							"query": [
								{"key": "genre", "value": "Drama"},
								{"key": "director", "value": "Christopher Nolan"},
								{"key": "year", "value": "2008"},
								{"key": "search", "value": "Batman"},
								{"key": "sortBy", "value": "rating"},
								{"key": "sortOrder", "value": "desc"},
								{"key": "limit", "value": "10"},
								{"key": "page", "value": "1"}
							]
						},
						"description": "Get movies with filtering, sorting, searching, and pagination"
					}
				},
				{
					"name": "Create Movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test('Movie created successfully', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"    pm.expect(responseJson.data).to.have.property('movie_id');",
									"    pm.environment.set('lastCreatedMovieId', responseJson.data.movie_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Test Movie from Postman\",\n    \"overview\": \"A test movie created via Postman API testing\",\n    \"year\": 2024,\n    \"duration_minutes\": 120,\n    \"rating\": 8.5,\n    \"director\": \"Test Director\",\n    \"genre\": \"Action, Drama\",\n    \"cast_list\": \"Actor A, Actor B, Actor C\",\n    \"trailer_url\": \"https://www.youtube.com/watch?v=example\",\n    \"poster_landscape\": \"https://picsum.photos/400/225\",\n    \"poster_portrait\": \"https://picsum.photos/300/450\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/movies",
							"host": ["{{baseUrl}}"],
							"path": ["movies"]
						},
						"description": "Create a new movie (requires authentication)"
					}
				},
				{
					"name": "Get Movie by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Movie data retrieved', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"    pm.expect(responseJson.data).to.have.property('movie_id');",
									"    pm.expect(responseJson.data).to.have.property('title');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/movies/{{lastCreatedMovieId}}",
							"host": ["{{baseUrl}}"],
							"path": ["movies", "{{lastCreatedMovieId}}"]
						},
						"description": "Get a specific movie by ID (requires authentication)"
					}
				}
			]
		},
		{
			"name": "File Upload",
			"item": [
				{
					"name": "Upload Single File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('File uploaded successfully', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"    pm.expect(responseJson.data).to.have.property('filename');",
									"    pm.expect(responseJson.data).to.have.property('url');",
									"    pm.environment.set('uploadedFilename', responseJson.data.filename);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/path/to/your/image.jpg",
									"description": "Select an image file to upload"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/upload",
							"host": ["{{baseUrl}}"],
							"path": ["upload"]
						},
						"description": "Upload a single image file (requires authentication)"
					}
				},
				{
					"name": "Upload Multiple Files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Multiple files uploaded', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"    pm.expect(responseJson.data.files).to.be.an('array');",
									"    pm.expect(responseJson.data.files.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "files",
									"type": "file",
									"src": "/path/to/image1.jpg"
								},
								{
									"key": "files",
									"type": "file",
									"src": "/path/to/image2.jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/upload/multiple",
							"host": ["{{baseUrl}}"],
							"path": ["upload", "multiple"]
						},
						"description": "Upload multiple image files (requires authentication)"
					}
				},
				{
					"name": "Delete File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('File deleted successfully', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"    pm.expect(responseJson.message).to.include('deleted');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/upload/{{uploadedFilename}}",
							"host": ["{{baseUrl}}"],
							"path": ["upload", "{{uploadedFilename}}"]
						},
						"description": "Delete an uploaded file (requires authentication)"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script for global setup",
					"console.log('Running request to: ' + pm.request.url);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test('Response time is less than 5000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"pm.test('Response has Content-Type header', function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "verificationToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "lastCreatedMovieId",
			"value": "",
			"type": "string"
		},
		{
			"key": "uploadedFilename",
			"value": "",
			"type": "string"
		}
	]
}