{
	"info": {
		"_postman_id": "YOUR_UNIQUE_COLLECTION_ID",
		"description": "A collection of requests for testing the Movie API. All movie endpoints require authentication - run Login User first to get authToken.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "YOUR_EXPORTER_ID"
	},
	"item": [
		{
			"name": "Login User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Response has token', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.data.token).to.be.a('string');",
							"    pm.environment.set('authToken', responseJson.data.token);",
							"    console.log('Set authToken for movie API testing');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				},
				"description": "Login with email and password to get JWT token for movie API testing. Run this first to set authToken."
			},
			"response": []
		},
		{
			"name": "Get All Movies",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/movies",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"movies"
					]
				},
				"description": "Retrieves a list of all movies (requires authentication)."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Create New Movie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 Created\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Response has movieId\", function () {",
							"    const responseBody = pm.response.json();",
							"    pm.expect(responseBody.movieId).to.be.a('number');",
							"    if (responseBody.movieId) {",
							"        pm.environment.set(\"lastCreatedMovieId\", responseBody.movieId);",
							"        console.log('Set lastCreatedMovieId to: ' + responseBody.movieId);",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Awesome New Movie From Postman\",\n    \"overview\": \"A thrilling adventure created via Postman.\",\n    \"year\": 2025,\n    \"duration_minutes\": 125,\n    \"rating\": 4.8,\n    \"director\": \"Postman Director\",\n    \"cast_list\": \"Actor A, Actor B\",\n    \"poster_landscape\": \"https://picsum.photos/288/162\",\n    \"poster_portrait\": \"https://picsum.photos/200/300\",\n    \"genre\": \"Action\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/movies",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"movies"
					]
				},
				"description": "Adds a new movie to the database (requires authentication). The ID of the created movie is stored in the `lastCreatedMovieId` environment variable."
			},
			"response": []
		},
		{
			"name": "Get Movie By ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Ensure lastCreatedMovieId is available, otherwise use a default or skip",
							"if (!pm.environment.get(\"lastCreatedMovieId\")) {",
							"    console.warn('lastCreatedMovieId is not set. You might need to run Create New Movie first or set it manually.');",
							"    // Optionally, you could set a default existing ID if you know one, or skip the request",
							"    // pm.environment.set(\"lastCreatedMovieId\", \"1\"); // Example: set to a known ID",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/movies/{{lastCreatedMovieId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"movies",
						"{{lastCreatedMovieId}}"
					]
				},
				"description": "Retrieves a single movie by its ID (requires authentication). Uses `lastCreatedMovieId` from the environment."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Update Movie By ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"if (!pm.environment.get(\"lastCreatedMovieId\")) {",
							"    console.warn('lastCreatedMovieId is not set for Update. Run Create New Movie first.');",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Updated Awesome Movie Title\",\n    \"overview\": \"The overview has been updated via Postman PATCH.\",\n    \"rating\": 4.9,\n    \"genres\": [\"Drama\", \"Thriller\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/movies/{{lastCreatedMovieId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"movies",
						"{{lastCreatedMovieId}}"
					]
				},
				"description": "Updates an existing movie's details by its ID (requires authentication). Uses `lastCreatedMovieId`."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Delete Movie By ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"if (!pm.environment.get(\"lastCreatedMovieId\")) {",
							"    console.warn('lastCreatedMovieId is not set for Delete. Run Create New Movie first.');",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK or 404 Not Found (if already deleted)\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
							"});",
							"// Clear the lastCreatedMovieId after successful deletion if status is 200",
							"if (pm.response.code === 200) {",
							"   pm.environment.unset(\"lastCreatedMovieId\");",
							"   console.log('Cleared lastCreatedMovieId after deletion.');",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/movies/{{lastCreatedMovieId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"movies",
						"{{lastCreatedMovieId}}"
					]
				},
				"description": "Deletes a movie by its ID (requires authentication). Uses `lastCreatedMovieId` and clears it upon successful deletion."
			},
			"response": []
		}
	]
}